"use strict";(self.webpackChunksuperbee_front=self.webpackChunksuperbee_front||[]).push([[1562],{48542:(t,r,e)=>{e.d(r,{S:()=>n});var a=e(54705),s=e(39088);class n{get chainId(){return this._chainId}constructor(t,r,e){(0,a.A)(this,"transfer",(0,s.dx)((async(t,r)=>this.erc20.transfer.prepare(t,r)))),(0,a.A)(this,"transferFrom",(0,s.dx)((async(t,r,e)=>this.erc20.transferFrom.prepare(t,r,e)))),(0,a.A)(this,"setAllowance",(0,s.dx)((async(t,r)=>this.erc20.setAllowance.prepare(t,r)))),(0,a.A)(this,"transferBatch",(0,s.dx)((async t=>this.erc20.transferBatch.prepare(t)))),this.contractWrapper=t,this.storage=r,this.erc20=new s.au(this.contractWrapper,this.storage,e),this._chainId=e}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async get(){return this.erc20.get()}async balance(){return await this.erc20.balance()}async balanceOf(t){return this.erc20.balanceOf(t)}async totalSupply(){return await this.erc20.totalSupply()}async allowance(t){return await this.erc20.allowance(t)}async allowanceOf(t,r){return await this.erc20.allowanceOf(t,r)}}},11562:(t,r,e)=>{e.r(r),e.d(r,{TokenDrop:()=>i});var a=e(54705),s=e(83042),n=e(39088),c=e(48542);e(2914),e(45355),e(26279),e(24259),e(96487),e(61718);class i extends c.S{constructor(t,r,e){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},c=arguments.length>4?arguments[4]:void 0,o=arguments.length>5?arguments[5]:void 0;super(arguments.length>6&&void 0!==arguments[6]?arguments[6]:new n.dw(t,r,c,s,e),e,o),(0,a.A)(this,"claim",(0,n.dx)((()=>{var t=this;return async function(r){let e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return t.claimTo.prepare(await t.contractWrapper.getSignerAddress(),r,e)}})())),(0,a.A)(this,"claimTo",(0,n.dx)((()=>{var t=this;return async function(r,e){let a=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];return t.erc20.claimTo.prepare(r,e,{checkERC20Allowance:a})}})())),(0,a.A)(this,"delegateTo",(0,n.dx)((async t=>n.aW.fromContractWrapper({contractWrapper:this.contractWrapper,method:"delegate",args:[await(0,n.cL)(t)]})))),(0,a.A)(this,"burnTokens",(0,n.dx)((async t=>this.erc20.burn.prepare(t)))),(0,a.A)(this,"burnFrom",(0,n.dx)((async(t,r)=>this.erc20.burnFrom.prepare(t,r)))),this.abi=n.e.parse(c||[]),this.metadata=new n.ah(this.contractWrapper,n.e1,this.storage),this.app=new n.b0(this.contractWrapper,this.metadata,this.storage),this.roles=new n.ai(this.contractWrapper,i.contractRoles),this.encoder=new n.ag(this.contractWrapper),this.estimator=new n.aQ(this.contractWrapper),this.events=new n.aR(this.contractWrapper),this.sales=new n.ak(this.contractWrapper),this.platformFees=new n.aT(this.contractWrapper),this.interceptor=new n.aS(this.contractWrapper),this.claimConditions=new n.am(this.contractWrapper,this.metadata,this.storage)}async getVoteBalance(){return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress())}async getVoteBalanceOf(t){return await this.erc20.getValue(await this.contractWrapper.read("getVotes",[await(0,n.cL)(t)]))}async getDelegation(){return await this.getDelegationOf(await this.contractWrapper.getSignerAddress())}async getDelegationOf(t){return await this.contractWrapper.read("delegates",[await(0,n.cL)(t)])}async isTransferRestricted(){return!await this.contractWrapper.read("hasRole",[(0,n.bI)("transfer"),s.L])}async prepare(t,r,e){return n.aW.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:r,overrides:e})}async call(t,r,e){return this.contractWrapper.call(t,r,e)}}(0,a.A)(i,"contractRoles",n.e0)}}]);